#region Copyright
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PartialOutput.cs" company="Ian Horswill">
// Copyright (C) 2020 Ian Horswill
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in the
// Software without restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so, subject to the
// following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
// PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Step.Output;

namespace Step.Interpreter
{
    /// <summary>
    /// Tracks the output buf and state of the text generated by a task.
    /// The buf is writable but the PartialOutput object is read-only.
    /// Calling Append will write the buf but return a new PartialOutput
    /// struct, that is also read-only.
    /// The read-only-ness is to make backtracking easy.
    /// </summary>
    [DebuggerDisplay("{" + nameof(AsString) + "}")]
    public readonly struct TextBuffer
    {
        private class ResizableBuffer
        {
            public ResizableBuffer(string[] data)
            {
                Buffer = data;
            }

            public string[] Buffer;

            public void Grow(int newSize)
            {
                var newBuffer = new string[newSize];
                Array.Copy(Buffer,newBuffer, Buffer.Length);
                Buffer = newBuffer;
            }
        }

        private readonly ResizableBuffer buffer;

        /// <summary>
        /// Fixed buf in which to hold the output
        /// </summary>
        public readonly string[] Buffer => buffer.Buffer;
        /// <summary>
        /// Amount of Buffer currently in use.
        /// The output generated so far is in cells Buffer[0 ... Length-1]
        /// </summary>
        public readonly int Length;

        /// <summary>
        /// True means this is a buf we're writing new text into (write mode/generate mode).
        /// False means it's a buf pre-loaded with text we're matching against (read mode/parse mode).
        /// </summary>
        public readonly bool WriteMode;

        private TextBuffer(ResizableBuffer buf, int length, bool writeMode)
        {
            buffer = buf;
            Length = length;
            WriteMode = writeMode;
        }

        /// <summary>
        /// Default size for a text buf
        /// </summary>
        public const int StartingCapacity = 100;

        /// <summary>
        /// Make an empty PartialOutput with a new buf.
        /// </summary>
        public TextBuffer(int capacity)
            : this(capacity == 0 ? Array.Empty<string>() : new string[capacity])
        { }

        /// <summary>
        /// Make buf with text to be matched by a program running in parse mode
        /// </summary>
        /// <param name="text">Text to be parsed</param>
        public static TextBuffer MakeReadModeTextBuffer(string[] text) => new TextBuffer(new ResizableBuffer(text), 0, false);

        /// <summary>
        /// Make an empty PartialOutput that stores output in the specified buf.
        /// </summary>
        /// <param name="buffer"></param>
        public TextBuffer(string[] buffer) : this(new ResizableBuffer(buffer), 0, true) { }

        /// <summary>
        /// Make an empty PartialOutput with a new buf.
        /// </summary>
        public static TextBuffer NewEmpty() => new TextBuffer(StartingCapacity);

        /// <summary>
        /// Add tokens to buf and return a new PartialOutput with the updated length.
        /// Upon backtracking, the new PartialOutput can be thrown away and this one
        /// reused.
        /// </summary>
        /// <param name="tokens">Tokens to add to output</param>
        /// <returns>New buf state</returns>
        public TextBuffer Append(params string[] tokens)
        {
            if (!WriteMode)
                throw new InvalidOperationException("Attempt to write to a read mode Text buf");
            CheckSpace(tokens.Length);
            Array.Copy(tokens, 0, Buffer, Length, tokens.Length);
            return new TextBuffer(buffer, Length + tokens.Length, true);
        }

        /// <summary>
        /// Add tokens to buf and return a new PartialOutput with the updated length.
        /// Upon backtracking, the new PartialOutput can be thrown away and this one
        /// reused.
        /// </summary>
        /// <param name="tokens">Tokens to add to output</param>
        /// <returns>New buf state</returns>
        public TextBuffer Append(IEnumerable<string> tokens)
        {
            if (!WriteMode)
                throw new InvalidOperationException("Attempt to write to a read mode Text buf");
            
            var count = 0;
            foreach (var token in tokens)
            {
                CheckSpace(count+1);
                Buffer[Length + count++] = token;
            }
            return new TextBuffer(buffer, Length + count, true);
        }

        private void CheckSpace(int i)
        {
            var neededLength = Length + i;
            if (neededLength >= Buffer.Length)
            {
                if (Buffer.Length == 0)
                {
                    if (i == 0)
                        return;
                    throw new InvalidOperationException("Attempt to print when printing disabled");
                }

                var newSize = Buffer.Length;
                while (newSize < neededLength) newSize <<= 1;
                buffer.Grow(newSize);
            }
        }

        /// <summary>
        /// Write tokens to buf, if write mode, otherwise attempt to match them
        /// </summary>
        /// <param name="tokens">Tokens to match to buf</param>
        /// <param name="result">expanded or consumed buf</param>
        /// <returns>True on success</returns>
        public bool Unify(string[] tokens, out TextBuffer result)
        {
            if (WriteMode)
            {
                result = Append(tokens);
                return true;
            }
            // Read mode - try matching the tokens
            if (Buffer.Length - Length < tokens.Length) 
            {
                // Not enough tokens left
                result = this;
                return false;
            }
            for (var i = 0; i < tokens.Length; i++)
                if (!string.Equals(tokens[i],Buffer[Length + i], StringComparison.CurrentCultureIgnoreCase))
                {
                    result = this;
                    return false;
                }

            result = new TextBuffer(buffer, Length + tokens.Length, false);
            return true;
        }

        /// <summary>
        /// Return the next token from a read-mode buf, or null if at the end.
        /// </summary>
        /// <param name="newBuffer">Resulting updated buf state</param>
        /// <returns>Next token or null if end of buf</returns>
        /// <exception cref="InvalidOperationException">If buf is write mode</exception>
        public string? NextToken(out TextBuffer newBuffer)
        {
            if (WriteMode)
                throw new InvalidOperationException("Attempt to read from a write mode text buf");
            if (Length == Buffer.Length)
                // EOF
            {
                newBuffer = this;
                return null;
            }
            newBuffer = new TextBuffer(buffer, Length + 1, false);
            return Buffer[Length];
        }

        /// <summary>
        /// Tokens output so far.
        /// </summary>
        public IEnumerable<string> Output
        {
            get
            {
                for (var i = 0; i < Length; i++)
                    yield return Buffer[i];
            }
        }

        /// <summary>
        /// The text generated so far, as a single string.
        /// </summary>
        public string AsString => Output.Untokenize();

        /// <summary>
        /// True if all tokens have been read from the buf
        /// </summary>
        /// <exception cref="InvalidOperationException">If the buf isn't in read mode</exception>
        public bool ReadCompleted
        {
            get
            {
                if (WriteMode)
                    throw new InvalidOperationException("Checking read completion on a write mode text buf");
                return Length == Buffer.Length;
            }
        }

        /// <inheritdoc />
        public override string ToString() => AsString;

        /// <summary>
        /// Return an array of the strings added to an output buf between before and after
        /// </summary>
        public static string[] Difference(in TextBuffer before, in TextBuffer after)
        {
            Debug.Assert(before.Buffer == after.Buffer);
            var size = after.Length - before.Length;
            if (size == 0)
                return Array.Empty<string>();
            Debug.Assert(size > 0);
            var result = new string[size];
            Array.Copy(before.Buffer, before.Length, result, 0, size);
            return result;
        }

        /// <summary>
        /// Return an array of the strings added to an output buf between before and after
        /// </summary>
        public static string[] operator -(TextBuffer after, TextBuffer before) => Difference(before, after); 

        /// <summary>
        /// Remove and return the last token in this output
        /// </summary>
        public (string token, TextBuffer newBuffer) Unappend()
        {
            if (!WriteMode)
                throw new InvalidOperationException("Attempt to write to a read mode Text buf");

            return (Buffer[Length - 1], new TextBuffer(buffer, Length - 1, true));
        }
    }
}
