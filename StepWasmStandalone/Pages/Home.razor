@page "/"
@using Step
@using Step.Interpreter
@using Step.Output
@using Task = System.Threading.Tasks.Task
@inject IJSRuntime JS

<PageTitle>Step</PageTitle>


<h3>Program</h3>

<div id="codeEditor" class="language-step"># Enter code here

</div>

<script type="module">
    import { CodeJar } from 'https://cdn.jsdelivr.net/npm/codejar@3.3.0/codejar.min.js';
    import { withLineNumbers } from 'https://cdn.jsdelivr.net/npm/codejar@3.3.0/linenumbers.min.js';
    
    function tokenUnderCursor(event) {
        const caretPosition = document.caretPositionFromPoint(event.clientX, event.clientY);
        const text = caretPosition.offsetNode.textContent
        const start = caretPosition.offset;
        const before = text.slice(0,start);
        const preTokenOffset = before.search(/(^|[^A-Za-z0-9_])[A-Za-z0-9_]+$/);
        if (preTokenOffset < 0) return "nothing before";
        const after = text.slice(start);
        let postTokenOffset = after.search(/[^A-Za-z0-9_]/);
        if (postTokenOffset < 0) postTokenOffset = after.length;
        return before.slice(preTokenOffset) + after.slice(0, postTokenOffset);
    }
    
    function gotoDefinition(name) {
        const pattern = "(^|\\n|\\r)"+name+"[^A-Za-z0-9_]";
        const content = editor.textContent;
        let start = content.search(pattern);
        if (start > 0) start++;
        if (start >= 0)
        {
            editor.focus();
            editor.textContent = content.substring(0, start+1);
            editor.scrollTop = start;
            const realScrollTop = editor.scrollTop;
            editor.textContent = content;
            highlight(editor);
            jar.restore({start: start, end: start });
            console.log(editor.clientHeight);
            if (realScrollTop < editor.clientHeight)
                editor.scrollTop = realScrollTop;
            else
                editor.scrollTop = realScrollTop + editor.clientHeight /2;
        }
        else
            console.log("Can't find: "+name);
    }

    const highlight = editor => {
      // highlight.js does not trims old tags,
      // let's do it by this hack.
      editor.textContent = editor.textContent;
      delete editor.dataset.highlighted;
      hljs.highlightElement(editor);
    };
    
    const editor = document.querySelector(".language-step");
    const jar = CodeJar(editor, withLineNumbers(highlight));

    // Put jar someplace the non-module scripts can find it.
    window.jar = jar;
    
    let dirty = false;
    
    editor.addEventListener("click", function(event) {
        if (!event.ctrlKey)
            return;
        event.preventDefault();
        const name = tokenUnderCursor(event);
        if (/^[A-Z][A-Za-z0-9_]*$/.test(name))
            gotoDefinition(name);
        else
            console.log("Token is not a name: "+name);
    });

    window.addEventListener('message', function(event) {
        if (event.source == window.opener)
        {
            jar.updateCode(DotNet.invokeMethod('StepWasmStandalone', 'SetSource', event.data));
            //jar.updateCode(event.data);
            dirty = false;
        } else
            console.log("wrong message sender");
    } );

    window.addEventListener("beforeunload", function (event) {
        if (dirty) {
            event.preventDefault();
            event.returnValue = '';
        }
    });

    document.getElementById('downloadButton').addEventListener('click', function() {
        // Create a Blob object with the content
        const blob = new Blob([jar.toString()], { type: "text/plain" });

        // Create a temporary anchor element
        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = "Saved.step"; // Set the file name

        // Append the anchor to the document, trigger the download, and remove it
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    });

    if (window.opener != null)
        window.opener.postMessage("_ready_", "*");
</script>

<script>
    function GetUserCode() {
        return jar.toString();
    }
</script>

@* <textarea @bind="@source" id="sourceCode" style="width: 800px; height: 400px;" spellcheck="false"/> *@
<br>
<button class="btn btn-primary" id="downloadButton">Download program</button>

<h3 style="padding-top: 2rem;">Command(s) to execute</h3>

<input @bind="@command" style="width:400px;" spellcheck="false" @onkeydown="@Enter"/>

<button class="btn btn-primary" @onclick="Run">Run</button>

@code {
    private static Module ReplUtilities = MakeReplUtilities();

    private string command ="";
    
    private string outputHeading = "No output";
    private MarkupString output = new MarkupString("no output");

    private async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            StateHasChanged();
            await Task.Delay(1);
            Run();
        }
    }

    const string commandCommentPrefix = "# Try:";
    [JSInvokable]
    public static string SetSource(string sourceCode)
    {
        if (sourceCode.StartsWith(commandCommentPrefix))
        {
            var commandStart = commandCommentPrefix.Length;
            var commandEnd = sourceCode.IndexOf('\n');
            singleton.command = sourceCode.Substring(commandStart, commandEnd-commandStart).Trim();
            sourceCode = sourceCode.Substring(commandEnd+1);
        }
        
        singleton.StateHasChanged();

        return sourceCode;
    }

    private async void Run()
    {
        if (command.Trim() == "")
        {
            output = (MarkupString)"";
            outputHeading = "Please enter a call in the command box";
        }
        else
        {
            try
            {
                Module.RichTextStackTraces = true;
                var m = new Module("User", ReplUtilities);
                var source = await JS.InvokeAsync<string>("GetUserCode");
                m.AddDefinitions(source);

                var topLevelSource = command;
                if (!topLevelSource.Trim().StartsWith('['))
                    topLevelSource = $"[{topLevelSource}]";
                topLevelSource = $"{topLevelSource} [PrintLocalBindings]";
                var rawOutput = m.ParseAndExecute(topLevelSource).Replace("\n", "<br>");
                if (rawOutput == "")
                {
                    outputHeading = "Yes";
                    output = (MarkupString)"<i>The command executed, but did not print anything</i>";
                }
                else
                {
                    output = (MarkupString)rawOutput;
                    outputHeading = "Output";
                }

            }
            catch (CallFailedException e) when (IsTopLevelCallFailure(e))
            {
                outputHeading = "No";
                output = (MarkupString)"<i>The command did not generate an error, but it was not successful; the answer to your query is \"no\".</i>";
            }
            catch (Exception e)
            {
                outputHeading = "Error";
                output = (MarkupString)(e.Message + "<br>" + Module.StackTrace(MethodCallFrame.CurrentFrameBindings).Replace("\n", "<br>"));
            }
        }

        StateHasChanged();
    }



    private static bool IsTopLevelCallFailure(CallFailedException e) => e.Task is CompoundTask { Name: "TopLevelCall" };

    private static Module MakeReplUtilities()
    {
        var m = new Module("ReplUtilities");
        m["PrintLocalBindings"] = new GeneralPrimitive("PrintLocalBindings",
                (args, o, bindings, p, k) =>
                {
                    ArgumentCountException.Check("PrintLocalBindings", 0, args, o);
                    var locals = bindings.Frame.Locals;
                    var output = new string[locals.Length * 4];
                    var index = 0;
                    foreach (var v in locals)
                    {
                        output[index++] = v.Name.Name;
                        output[index++] = "=";
                        var value = bindings.CopyTerm(v);
                        output[index++] = Writer.TermToString(value, bindings.Unifications); //+$":{value.GetType().Name}";
                        output[index++] = TextUtilities.NewLineToken;
                    }

                    return k(o.Append(TextUtilities.FreshLineToken).Append(output), bindings.Unifications,
                        bindings.State, p);
                })
            .Arguments()
            .Documentation("StepRepl//internals",
                "Prints the values of all local variables.  There probably isn't any reason for you to use this directly, but it's used by StepRepl to print the results of queries.");
        return m;
    }

    private static Home singleton=null!;
    protected override void OnInitialized()
    {
        singleton = this;
    }
}
<p></p>
<h3>@outputHeading</h3>

<p role="status">@output</p>